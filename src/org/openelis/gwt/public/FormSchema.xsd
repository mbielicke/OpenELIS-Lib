<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">

  <xsd:annotation>
    <xsd:documentation>
      This is a schema to be used to author and validate XML files that
      describe how to draw forms for GWT applications created by the Hygienic Lab.
      
      Terms panel and widget were chosen to map directly to objects in the GWT library 
      that extend the abstract classes Panel and Widget.  So like GWT widgets can be 
      added to panels, but panels cannot be added to widgets.
    </xsd:documentation>
  </xsd:annotation>

  <xsd:element name="screen">
    <xsd:annotation>
      <xsd:documentation>
        form is the root element for all documents.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element maxOccurs="1" minOccurs="1" name="display">
          <xsd:annotation>
            <xsd:documentation>
              Each form must have one and only one display tag.  This can be an empty tag. 
              The focus attribute is used to set focus to the first widget when in update mode. 
              
              If a display tag is to have children. The first child must be of PanelType.  
              PanelType is an abstract complexType.  Panels map directly to the Panel objects in the GWT 
              Library.  Since this is abstract the instance xml document must have an xsi:type attribute for 
              each panel element in the document relating it to one of the concrete types. 
            </xsd:documentation>
          </xsd:annotation>
          <xsd:complexType>
            <xsd:sequence maxOccurs="unbounded" minOccurs="0">   
              <xsd:element maxOccurs="unbounded" minOccurs="1" name="panel" type="PanelType"/>
            </xsd:sequence>
            <xsd:attribute name="focus" type="xsd:string"/>
            <xsd:attribute name="constants" type="xsd:string"/>
          </xsd:complexType>
        </xsd:element>
        <xsd:element maxOccurs="1" minOccurs="1" name="rpc">
          <xsd:annotation>
            <xsd:documentation>
              Each form must have one and only one rpc tag.  This can be an empty tag.
              This tag is used by the edu.uiowa.uhl.gwt.server.util.FormUtil to create the fields 
              that will be placed in the edu.uiowa.uhl.gwt.common.FormRPC object to pass data
              back and forth from the client to the server and to validate data inputed.
            </xsd:documentation>
          </xsd:annotation>
          <xsd:complexType>
            <xsd:sequence maxOccurs="unbounded" minOccurs="0">
              <xsd:element maxOccurs="unbounded" minOccurs="0" name="string" type="StringRPCType"/>
              <xsd:element maxOccurs="unbounded" minOccurs="0" name="number" type="NumberRPCType"/>
              <xsd:element maxOccurs="unbounded" minOccurs="0" name="check" type="CheckRPCType"/>
              <xsd:element maxOccurs="unbounded" minOccurs="0" name="date" type="DateRPCType"/>
              <xsd:element maxOccurs="unbounded" minOccurs="0" name="option" type="OptionRPCType"/>
              <xsd:element maxOccurs="unbounded" minOccurs="0" name="queryString" type="QueryStringType"/>
              <xsd:element maxOccurs="unbounded" minOccurs="0" name="queryNumber" type="QueryNumberType"/>
              <xsd:element maxOccurs="unbounded" minOccurs="0" name="queryDate" type="QueryDateType"/>
              <xsd:element maxOccurs="unbounded" minOccurs="0" name="queryCheck" type="QueryCheckType"/>
              <xsd:element maxOccurs="unbounded" minOccurs="0" name="queryOption" type="QueryOptionType"/>
              <xsd:element maxOccurs="unbounded" minOccurs="0" name="table" type="TableRPCType"/>
            </xsd:sequence>
          </xsd:complexType>
        </xsd:element>
      </xsd:sequence>
      <xsd:attribute name="id" type="xsd:string"/>
      <xsd:attribute name="serviceUrl" type="xsd:string"/>              
    </xsd:complexType>                            
  </xsd:element>        
  
  <xsd:complexType name="TreeItem">
    <xsd:sequence maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="item" maxOccurs="unbounded" minOccurs="0" type="TreeItem"/>
    </xsd:sequence>
   <xsd:attribute name="text" use="required"/>
   <xsd:attribute name="cat" type="xsd:string"/>
   <xsd:attribute name="key" type="xsd:string"/>
   <xsd:attribute name="value" type="xsd:string"/>
   <xsd:attribute name="drag" type="xsd:string"/>
   <xsd:attribute name="mouse" type="xsd:string"/>
   <xsd:attribute name="drop" type="xsd:string"/>
  </xsd:complexType>
  
   <xsd:complexType abstract="true" name="PanelType">
     <xsd:annotation>
       <xsd:documentation>
         This is the abstract definition that forms the base for the different Panel 
         layouts used in our GWT Applications.
       </xsd:documentation>
     </xsd:annotation>
     <xsd:attribute name="layout" use="required">
       <xsd:simpleType>
       <xsd:restriction base="xsd:string">
         <xsd:enumeration value="vertical"/>
         <xsd:enumeration value="horizontal"/>
         <xsd:enumeration value="absolute"/>
         <xsd:enumeration value="dock"/>
         <xsd:enumeration value="tab"/>
         <xsd:enumeration value="table"/>
         <xsd:enumeration value="deck"/>
         <xsd:enumeration value="vsplit"/>
         <xsd:enumeration value="hsplit"/>
         <xsd:enumeration value="stack"/>
         <xsd:enumeration value="disclosure"/>
       </xsd:restriction>
       </xsd:simpleType>
     </xsd:attribute>
     <xsd:attribute name="style" type="xsd:string"/> 
     <xsd:attribute name="width" type="xsd:string"/>
     <xsd:attribute name="height" type="xsd:string"/> 
     <xsd:attribute name="spacing" type="xsd:integer"/>
     <xsd:attribute name="mouse" type="xsd:string"/>
     <xsd:attribute name="drag" type="xsd:string"/>
     <xsd:attribute name="drop" type="xsd:string"/>
     <xsd:attribute name="valign">
       <xsd:simpleType>
         <xsd:restriction base="xsd:string">
           <xsd:enumeration value="top"/>
           <xsd:enumeration value="middle"/>
           <xsd:enumeration value="bottom"/>
         </xsd:restriction>
       </xsd:simpleType>
     </xsd:attribute>
     <xsd:attribute name="halign">
       <xsd:simpleType>
         <xsd:restriction base="xsd:string">
           <xsd:enumeration value="right"/>
           <xsd:enumeration value="center"/>
           <xsd:enumeration value="left"/>
         </xsd:restriction>
       </xsd:simpleType>
     </xsd:attribute>           
   </xsd:complexType> 
   
   <xsd:complexType name="Table">
     <xsd:annotation>
       <xsd:documentation>
         This is the concrete definition for a panel that will follow a table layout by
         using the the FlexCellTable widget in the GWT Library.  xsi:type="Table" must appear in the 
         panel element for this to be validated.
         id attribute is required so that it can identified for error proccesing.
       </xsd:documentation>
     </xsd:annotation>
     <xsd:complexContent>
       <xsd:extension base="PanelType">
         <xsd:sequence>
           <xsd:element maxOccurs="unbounded" minOccurs="0" name="row">
             <xsd:annotation>
               <xsd:documentation>
                 A panel with this layout must have row as its first child element. A row can then contain any number
                 of widget or panel elements each being a new column in the table. if the row element contains an 
                 id attribute that row object will be made available in the rows HashMap of the Form object so that 
                 it can be referred to by this id in client code.  This is useful if you need to make row visible or
                 hidden based on certain criteria.
                 If a row is of type error the row will display validation errors for the input field defined by the
                 id attribute. 
               </xsd:documentation>
             </xsd:annotation>
             <xsd:complexType>
               <xsd:sequence maxOccurs="unbounded" minOccurs="0">
			     <xsd:element maxOccurs="unbounded" minOccurs="0" name="panel" type="PanelType"/>
                 <xsd:element maxOccurs="unbounded" minOccurs="0" name="widget" type="TableWidgetType"/>
               </xsd:sequence>
               <xsd:attribute name="id" type="xsd:string"/>
               <xsd:attribute name="type">
                 <xsd:simpleType>
                   <xsd:restriction base="xsd:string">
                     <xsd:enumeration value="error"/>
                   </xsd:restriction>
                 </xsd:simpleType>
               </xsd:attribute>
             </xsd:complexType>
           </xsd:element> 
         </xsd:sequence>
         <xsd:attribute name="id" type="xsd:string" use="required"/>
       </xsd:extension>
     </xsd:complexContent>
   </xsd:complexType> 
   
   <xsd:complexType name="Panel">
     <xsd:annotation>
       <xsd:documentation>
         This is the concrete definition for a panel that will use either the VerticalPanel layout or
         the HorizontalPanel layout. This element can contain any number of panel or widget elements and in 
         any order that is necessary. 
       </xsd:documentation>
     </xsd:annotation>
     <xsd:complexContent>
       <xsd:extension base="PanelType">
         <xsd:sequence maxOccurs="unbounded" minOccurs="0">
           <xsd:element maxOccurs="unbounded" minOccurs="0" name="panel" type="PanelType"/>
           <xsd:element maxOccurs="unbounded" minOccurs="0" name="widget" type="PanelWidgetType"/>
         </xsd:sequence>
       </xsd:extension>
     </xsd:complexContent>
   </xsd:complexType>
   
   <xsd:complexType name="Split">
     <xsd:annotation>
       <xsd:documentation>
         This is the concrete definition for a panel that will use either the VerticalPanel layout or
         the HorizontalPanel layout. This element can contain any number of panel or widget elements and in 
         any order that is necessary. 
       </xsd:documentation>
     </xsd:annotation>
     <xsd:complexContent>
       <xsd:extension base="PanelType">
         <xsd:sequence>
           <xsd:element maxOccurs="2" minOccurs="2" name="section">
             <xsd:complexType>
              <xsd:sequence maxOccurs="unbounded" minOccurs="0">
                <xsd:element maxOccurs="unbounded" minOccurs="0" name="panel" type="PanelType"/>
                <xsd:element maxOccurs="unbounded" minOccurs="0" name="widget" type="PanelWidgetType"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
         </xsd:sequence>
         <xsd:attribute name="splitpos" type="xsd:string"/>
         <xsd:attribute name="sizeToWindow" type="xsd:boolean"/>
       </xsd:extension>
     </xsd:complexContent>
   </xsd:complexType>
   
   <xsd:complexType name="Disclosure">
     <xsd:annotation>
       <xsd:documentation>
         This is the concrete definition for a panel that will use either the VerticalPanel layout or
         the HorizontalPanel layout. This element can contain any number of panel or widget elements and in 
         any order that is necessary. 
       </xsd:documentation>
     </xsd:annotation>
     <xsd:complexContent>
       <xsd:extension base="PanelType">
         <xsd:sequence>
           <xsd:element maxOccurs="1" minOccurs="1" name="header">
             <xsd:complexType>
              <xsd:sequence maxOccurs="unbounded" minOccurs="0">
                <xsd:element maxOccurs="unbounded" minOccurs="0" name="panel" type="PanelType"/>
                <xsd:element maxOccurs="unbounded" minOccurs="0" name="widget" type="PanelWidgetType"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="1" name="content">
             <xsd:complexType>
              <xsd:sequence maxOccurs="unbounded" minOccurs="0">
                <xsd:element maxOccurs="unbounded" minOccurs="0" name="panel" type="PanelType"/>
                <xsd:element maxOccurs="unbounded" minOccurs="0" name="widget" type="PanelWidgetType"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
         </xsd:sequence>
       </xsd:extension>
     </xsd:complexContent>
   </xsd:complexType>
      
   <xsd:complexType name="Dock">
     <xsd:annotation>
       <xsd:documentation>
         This is the concrete definition for a panel that will use the DockPanel layout.  This panel is the same
         as Border layout in Java swing.  This panel can contain any number of panel or widget elements and in 
         any order that they need be.
       </xsd:documentation>
     </xsd:annotation>  
     <xsd:complexContent>
       <xsd:extension base="PanelType">
         <xsd:sequence maxOccurs="unbounded" minOccurs="0">
           <xsd:element maxOccurs="unbounded" minOccurs="0" name="panel" type="PanelType"/>
           <xsd:element maxOccurs="unbounded" minOccurs="0" name="widget" type="DockWidgetType"/>
         </xsd:sequence>
       </xsd:extension>
     </xsd:complexContent>
   </xsd:complexType>
   
   <xsd:complexType name="Absolute">
     <xsd:annotation>
       <xsd:documentation>
         This is the concrete definition for a panel that will use the Absolutely positioned layout. 
         This panel can contain any number of panel or widget elementsn and in any order needed.
       </xsd:documentation>
     </xsd:annotation> 
     <xsd:complexContent>
       <xsd:extension base="PanelType">
         <xsd:sequence maxOccurs="unbounded" minOccurs="0">
           <xsd:element maxOccurs="unbounded" minOccurs="0" name="panel" type="PanelType"/>
           <xsd:element maxOccurs="unbounded" minOccurs="0" name="widget" type="AbsWidgetType"/>
         </xsd:sequence>
       </xsd:extension>
     </xsd:complexContent>
   </xsd:complexType>    
   
   <xsd:complexType name="Tab">
     <xsd:annotation>
       <xsd:documentation>
         This is the concrete definition for a panel that uses Tabs to contain other panels and widgets.
       </xsd:documentation>
     </xsd:annotation>
     <xsd:complexContent>
       <xsd:extension base="PanelType">
         <xsd:sequence>
         <xsd:element maxOccurs="unbounded" minOccurs="1" name="tab">
           <xsd:annotation>
             <xsd:documentation>
               A panel defiend to have tab layout must contain at least one tab element and it must be the 
               first child element in the hierarchy. if id is specified the panel will be made available in
               the panels HashMap and available to the client code.  text is a mandatory attribute and will
               placed in the tab on the screen for display. A tab will have defualt layout of vertical and 
               any number of widgets or panels can be placed in a tab and in any order.  It is highly suggested 
               though that the first element be a panel to specifically set the layout.  
             </xsd:documentation>
           </xsd:annotation>
           <xsd:complexType>
             <xsd:sequence maxOccurs="unbounded" minOccurs="0">
               <xsd:element maxOccurs="unbounded" minOccurs="0" name="panel" type="PanelType"/>
               <xsd:element maxOccurs="unbounded" minOccurs="0" name="widget" type="PanelWidgetType"/>
             </xsd:sequence>
             <xsd:attribute name="id" type="xsd:string"/>
             <xsd:attribute name="text" type="xsd:string" use="required"/>
           </xsd:complexType>
         </xsd:element>
         </xsd:sequence>
       </xsd:extension>
     </xsd:complexContent>
   </xsd:complexType>
   
   <xsd:complexType name="Stack">
     <xsd:annotation>
       <xsd:documentation>
         This is the concrete definition for a panel that uses Tabs to contain other panels and widgets.
       </xsd:documentation>
     </xsd:annotation>
     <xsd:complexContent>
       <xsd:extension base="PanelType">
         <xsd:sequence>
         <xsd:element maxOccurs="unbounded" minOccurs="1" name="stack">
           <xsd:annotation>
             <xsd:documentation>
               A panel defiend to have tab layout must contain at least one tab element and it must be the 
               first child element in the hierarchy. if id is specified the panel will be made available in
               the panels HashMap and available to the client code.  text is a mandatory attribute and will
               placed in the tab on the screen for display. A tab will have defualt layout of vertical and 
               any number of widgets or panels can be placed in a tab and in any order.  It is highly suggested 
               though that the first element be a panel to specifically set the layout.  
             </xsd:documentation>
           </xsd:annotation>
           <xsd:complexType>
             <xsd:sequence maxOccurs="unbounded" minOccurs="0">
               <xsd:element maxOccurs="unbounded" minOccurs="0" name="panel" type="PanelType"/>
               <xsd:element maxOccurs="unbounded" minOccurs="0" name="widget" type="PanelWidgetType"/>
             </xsd:sequence>
             <xsd:attribute name="id" type="xsd:string"/>
             <xsd:attribute name="text" type="xsd:string" use="required"/>
           </xsd:complexType>
         </xsd:element>
         </xsd:sequence>
       </xsd:extension>
     </xsd:complexContent>
   </xsd:complexType>   
   
   <xsd:complexType name="Deck">
     <xsd:annotation>
       <xsd:documentation>
         This is the concrete definition for a panel that uses Tabs to contain other panels and widgets.
       </xsd:documentation>
     </xsd:annotation>
     <xsd:complexContent>
       <xsd:extension base="PanelType">
         <xsd:sequence>
         <xsd:element maxOccurs="unbounded" minOccurs="1" name="deck">
           <xsd:annotation>
             <xsd:documentation>
               A panel defiend to have Deck layout must contain at least one deck element and it must be the 
               first child element in the hierarchy. if id is specified the panel will be made available in
               the panels HashMap and available to the client code.    
             </xsd:documentation>
           </xsd:annotation>
           <xsd:complexType>
             <xsd:sequence maxOccurs="unbounded" minOccurs="0">
               <xsd:element maxOccurs="unbounded" minOccurs="0" name="panel" type="PanelType"/>
               <xsd:element maxOccurs="unbounded" minOccurs="0" name="widget" type="PanelWidgetType"/>
             </xsd:sequence>
             <xsd:attribute name="id" type="xsd:string"/>
           </xsd:complexType>
         </xsd:element>
         </xsd:sequence>
         <xsd:attribute name="id" type="xsd:string" use="required"/>
       </xsd:extension>
     </xsd:complexContent>
   </xsd:complexType>
      
   <xsd:complexType name="TableWidgetType">
     <xsd:annotation>
       <xsd:documentation>
         This type extends the Widget type and adds attributes for positioning in a table layout panel.
       </xsd:documentation>
     </xsd:annotation>
     <xsd:complexContent>
       <xsd:extension base="Widget">
         <xsd:attribute name="rowspan" type="xsd:integer"/>
         <xsd:attribute name="colspan" type="xsd:integer"/>
         <xsd:attribute name="style" type="xsd:string"/>
         <xsd:attribute name="align">
           <xsd:simpleType>
             <xsd:restriction base="xsd:string">
               <xsd:enumeration value="right"/>
               <xsd:enumeration value="left"/>
               <xsd:enumeration value="center"/>
             </xsd:restriction>
           </xsd:simpleType>
         </xsd:attribute>        
       </xsd:extension>
     </xsd:complexContent>                 
   </xsd:complexType>
   
   <xsd:complexType name="PanelWidgetType">
     <xsd:annotation>
       <xsd:documentation>
         This type extends Widget and adds attributes for positioning in Vertical and Horizontal Panels
       </xsd:documentation>
     </xsd:annotation>
     <xsd:complexContent>
       <xsd:extension base="Widget">
         <xsd:attribute name="valign">
           <xsd:simpleType>
             <xsd:restriction base="xsd:string">
               <xsd:enumeration value="top"/>
               <xsd:enumeration value="middle"/>
               <xsd:enumeration value="bottom"/>
             </xsd:restriction>
           </xsd:simpleType>
         </xsd:attribute>
         <xsd:attribute name="halign">
           <xsd:simpleType>
             <xsd:restriction base="xsd:string">
               <xsd:enumeration value="right"/>
               <xsd:enumeration value="center"/>
               <xsd:enumeration value="left"/>
             </xsd:restriction>
           </xsd:simpleType>
         </xsd:attribute>
       </xsd:extension>
     </xsd:complexContent>
   </xsd:complexType>
   
   <xsd:complexType name="DockWidgetType">
     <xsd:annotation>
       <xsd:documentation>
         This type extends Widget and adds Attributes for positioning in DockPanel layout.
       </xsd:documentation>
     </xsd:annotation>
     <xsd:complexContent>
       <xsd:extension base="Widget">
         <xsd:attribute name="dir" use="required">
           <xsd:simpleType>
             <xsd:restriction base="xsd:string">
               <xsd:enumeration value="north"/>
               <xsd:enumeration value="south"/>
               <xsd:enumeration value="west"/>
               <xsd:enumeration value="east"/>
               <xsd:enumeration value="center"/>
             </xsd:restriction>
           </xsd:simpleType>
         </xsd:attribute>
         <xsd:attribute name="valign">
           <xsd:simpleType>
             <xsd:restriction base="xsd:string">
               <xsd:enumeration value="top"/>
               <xsd:enumeration value="middle"/>
               <xsd:enumeration value="bottom"/>
             </xsd:restriction>
           </xsd:simpleType>
         </xsd:attribute>
         <xsd:attribute name="halign">
           <xsd:simpleType>
             <xsd:restriction base="xsd:string">
               <xsd:enumeration value="right"/>
               <xsd:enumeration value="center"/>
               <xsd:enumeration value="left"/>
             </xsd:restriction>
           </xsd:simpleType>
         </xsd:attribute>     
       </xsd:extension>
     </xsd:complexContent>
   </xsd:complexType>
   
   <xsd:complexType name="AbsWidgetType">
     <xsd:annotation>
       <xsd:documentation>
         This type extends Widget and adds attributes for positioning in AbsolutePanel Layout.
       </xsd:documentation>
     </xsd:annotation>
     <xsd:complexContent>
       <xsd:extension base="Widget">
         <xsd:attribute name="x" type="xsd:integer" use="required"/>
         <xsd:attribute name="y" type="xsd:integer" use="required"/>
       </xsd:extension>
     </xsd:complexContent>
   </xsd:complexType>   
   
   <xsd:complexType abstract="true" mixed="true" name="WidgetType">
     <xsd:annotation>
       <xsd:documentation>
         This is the abstract base used to create all widgets.  A widget refers to all display or input objects 
         that can be used on a screen.  widgets are added to panels to draw the screen.
       </xsd:documentation>
     </xsd:annotation>
     <xsd:attribute name="id" type="xsd:string"/>
     <xsd:attribute name="style" type="xsd:string"/>
     <xsd:attribute name="width" type="xsd:string"/>
     <xsd:attribute name="height" type="xsd:string"/>
     <xsd:attribute name="drag" type="xsd:string"/>
     <xsd:attribute name="drop" type="xsd:string"/>
     <xsd:attribute name="mouse" type="xsd:string"/>
   </xsd:complexType>
   
   <xsd:complexType abstract="true" mixed="true" name="InputWidgetType">
     <xsd:annotation>
       <xsd:documentation>
         This type extends the base WidgetType and becomes the base for all widgets that can accept input from 
         the user.  rpc attribute is required and must correspond to the key attribute of a rpc element.  The tab element
         is used to describe the tab order for a form.  It is a comma separated string corresponding to the forward tab 
         backward tab.  for instance tab="zip,city", if the current field is state, forward will focus zip and backward 
         tab will focus city.  These names must appear as rpc attributes of other widgets.  shortcut attribute must be one
         character.  alt+shortcut will put focus on this widget directly.  
       </xsd:documentation>
     </xsd:annotation>
     <xsd:complexContent>
       <xsd:extension base="WidgetType">
         <xsd:attribute name="key" type="xsd:string" use="required"/>
         <xsd:attribute name="tab" type="xsd:string"/>
         <xsd:attribute name="shortcut" type="xsd:string"/>
       </xsd:extension>
     </xsd:complexContent>
   </xsd:complexType>
   
   <xsd:complexType name="Widget">
     <xsd:annotation>
       <xsd:documentation>
         This is the concrete definition for WidgetType and InputWidgetType.  Each widget element must contain at most
         on of the following elements in the choice.  This element will tell the AbstractForm which GWT widget to draw
         on the screen. 
       </xsd:documentation>
     </xsd:annotation>
     <xsd:choice>
       <xsd:element name="error">
         <xsd:annotation>
           <xsd:documentation>
             An error widget is a place holder for displaying validation errors for an input widget.
             id attribute is required and must match the rpc attribute of an InputWidget.
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType mixed="true">
           <xsd:complexContent>
             <xsd:restriction base="WidgetType">     
               <xsd:attribute name="id" type="xsd:string" use="required"/>
             </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>

       <xsd:element name="text">   
         <xsd:annotation>
           <xsd:documentation>
             A text widget is used to display static text on the screen.  This widget will display whatever text is 
             found in the TextNode of this element.
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType mixed="true">
           <xsd:complexContent>
             <xsd:extension base="WidgetType">
	           <xsd:attribute name="wordwrap" type="xsd:boolean"/>
	         </xsd:extension>
	       </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>
   
       <xsd:element name="const">   
         <xsd:annotation>
           <xsd:documentation>
             A text widget is used to display static text on the screen.  This widget will display whatever text is 
             pulled form a properties file based on locale.
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType mixed="true">
           <xsd:complexContent>
             <xsd:extension base="WidgetType">
             <xsd:attribute name="wordwrap" type="xsd:boolean"/>
           </xsd:extension>
         </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>   
       
       <xsd:element name="html">
         <xsd:annotation>
           <xsd:documentation>
             This widget is used to display html on the screen.  The html displayed will be pulled from 
             the TextNode of the element. an onclick event can be attached to this widget.
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType>
           <xsd:complexContent>
             <xsd:extension base="WidgetType">     
               <xsd:attribute name="onclick" type="xsd:string"/>
             </xsd:extension>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>
   
       <xsd:element name="label">
         <xsd:annotation>
           <xsd:documentation>
             This widget is used to display static text that is pased to the client from the server.
             rpc is the only required attribute and must correspond to a key attribute on a rpc element.
           </xsd:documentation>
         </xsd:annotation>   
         <xsd:complexType>
           <xsd:complexContent>
             <xsd:extension base="WidgetType"> 
               <xsd:attribute name="key" type="xsd:string" use="required"/>
               <xsd:attribute name="wordwrap" type="xsd:boolean"/>
             </xsd:extension>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>
       
       <xsd:element name="appMessage">
         <xsd:annotation>
           <xsd:documentation>
             This widget is used to display static text that is pased to the client from the server.
             rpc is the only required attribute and must correspond to a key attribute on a rpc element.
           </xsd:documentation>
         </xsd:annotation>   
         <xsd:complexType>
           <xsd:complexContent>
             <xsd:extension base="WidgetType"> 
               <xsd:attribute name="key" type="xsd:string" use="required"/>
             </xsd:extension>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>       
   
       <xsd:element name="textbox">
         <xsd:annotation>
           <xsd:documentation>
             This widget is used for gethering and dsiplaying single lines of text
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType>
           <xsd:complexContent>
             <xsd:extension base="InputWidgetType">
               <xsd:attribute name="case">
                 <xsd:simpleType>
                   <xsd:restriction base="xsd:string">
                     <xsd:enumeration value="upper"/>
                     <xsd:enumeration value="lower"/>
                     <xsd:enumeration value="mixed"/>
                   </xsd:restriction> 
                 </xsd:simpleType>
               </xsd:attribute>
             </xsd:extension>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>
 
       <xsd:element name="textarea">
         <xsd:annotation>
           <xsd:documentation>
             This widget isused for gathering and displaying multiple lines of text.
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType>
           <xsd:complexContent>
             <xsd:extension base="InputWidgetType"/>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>
   
       <xsd:element name="password">
         <xsd:annotation>
           <xsd:documentation>
             This widget is used for entering sensitive data that needs to be masked.
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType>
           <xsd:complexContent>
             <xsd:extension base="InputWidgetType"/>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>
   
       <xsd:element name="dragselect">
         <xsd:annotation>
           <xsd:documentation>
             This element will add the custom drag select widget created by the lab.
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType>
           <xsd:complexContent>
             <xsd:extension base="InputWidgetType"/>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>
   
       <xsd:element name="option">
         <xsd:annotation>
           <xsd:documentation>
             This is a drop down list.  A event can be attached to this widget by setting 
             the onChange attribute
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType>
           <xsd:complexContent>
             <xsd:extension base="InputWidgetType">
               <xsd:attribute name="onChange" type="xsd:string"/>
               <xsd:attribute name="multi" type="xsd:boolean"/>
               <xsd:attribute name="size" type="xsd:integer"/>
             </xsd:extension>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>
  
       <xsd:element name="calendar">
         <xsd:annotation>
           <xsd:documentation>
             This widget is used to enter Datetime values.  Required attributes begin and end refer to the precision of the
             date as described in the Datetime class.  
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType>
           <xsd:complexContent>
             <xsd:extension base="InputWidgetType">
               <xsd:attribute name="begin" type="xsd:integer" use="required"/>
               <xsd:attribute name="end" type="xsd:integer" use="required"/>  
               <xsd:attribute name="week" type="xsd:boolean"/> 
               <xsd:attribute name="onChange" type="xsd:string"/>    
             </xsd:extension>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>
     
       <xsd:element name="auto">
         <xsd:annotation>
           <xsd:documentation>
             This is the AutoComplete widget.  A textbox will be displayed and choices will be displayed as the user types.
             the cat attribute is used to tell the server which auto complete options to return.  
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType>
           <xsd:complexContent>
             <xsd:extension base="InputWidgetType">
               <xsd:attribute name="cat" type="xsd:string" use="required"/>
               <xsd:attribute name="serviceUrl" type="xsd:string" use="required"/>
             </xsd:extension>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>
   
       <xsd:element name="check">
         <xsd:annotation>
           <xsd:documentation>
             This widget displays a simple checkbox.
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType>
           <xsd:complexContent>
             <xsd:extension base="InputWidgetType"/>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>
       
       <xsd:element name="radio">
         <xsd:annotation>
           <xsd:documentation>
             This widget displays a simple radio button.
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType>
           <xsd:complexContent>
             <xsd:extension base="InputWidgetType">
			   <xsd:attribute name="group" type="xsd:string" use="required"/>            
             </xsd:extension>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>              
       
       <xsd:element name="image">
         <xsd:annotation>
           <xsd:documentation>
             This widget will display an image referenced by the url attribute
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType>
           <xsd:complexContent>
             <xsd:extension base="WidgetType">
               <xsd:attribute name="url" type="xsd:string" use="required"/>
               <xsd:attribute name="key" type="xsd:string"/>
               <xsd:attribute name="onclick" type="xsd:string"/>
             </xsd:extension>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>
       
       <xsd:element name="button">
         <xsd:annotation>
           <xsd:documentation>
             This widget will display a button and automatically add an onlick event
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType>
           <xsd:complexContent>
             <xsd:extension base="InputWidgetType">
               <xsd:attribute name="text" type="xsd:string"/>
               <xsd:attribute name="html" type="xsd:string"/>
               <xsd:attribute name="constant" type="xsd:boolean"/>
             </xsd:extension>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>
       
       <xsd:element name="maskedbox">
         <xsd:annotation>
           <xsd:documentation>
             This widget will display a button and automatically add an onlick event
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType>
           <xsd:complexContent>
             <xsd:extension base="InputWidgetType">
               <xsd:attribute name="mask" type="xsd:string"/>
             </xsd:extension>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>       
       
       <xsd:element name="buttonPanel">
         <xsd:annotation>
           <xsd:documentation>
             This widget is used to add controls to the screen for a form.
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType>
           <xsd:complexContent>
             <xsd:extension base="InputWidgetType">
               <xsd:attribute name="buttons" type="xsd:string"/>
             </xsd:extension>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>
       
       <xsd:element name="tabbrowser">
         <xsd:annotation>
           <xsd:documentation>
             This widget is used to display screens in a tab browser.
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType>
           <xsd:complexContent>
             <xsd:extension base="InputWidgetType">
               <xsd:attribute name="sizeToWindow" type="xsd:boolean"/>
               <xsd:attribute name="tabLimit" type="xsd:integer"/>
             </xsd:extension>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>
              
       <xsd:element name="winbrowser">
         <xsd:annotation>
           <xsd:documentation>
             This widget is used to display screens in a tab browser.
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType>
           <xsd:complexContent>
             <xsd:extension base="InputWidgetType">
               <xsd:attribute name="sizeToWindow" type="xsd:integer"/>
               <xsd:attribute name="winLimit" type="xsd:integer"/>
             </xsd:extension>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>
                     
       <xsd:element name="queryCheck">
         <xsd:annotation>
           <xsd:documentation>
             This is a checkbox used during query mode.
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType>
           <xsd:complexContent>
             <xsd:extension base="InputWidgetType"/>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>

       <xsd:element name="tree">
         <xsd:annotation>
           <xsd:documentation>
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType mixed="true">
           <xsd:complexContent>
             <xsd:extension base="InputWidgetType">
               <xsd:sequence maxOccurs="unbounded" minOccurs="0">
                 <xsd:element maxOccurs="unbounded" minOccurs="0" name="item" type="TreeItem"/>
               </xsd:sequence>
           </xsd:extension>
         </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>
              
       <xsd:element name="table">
         <xsd:annotation>
           <xsd:documentation>
             This widget will display a table
           </xsd:documentation>
         </xsd:annotation>
         <xsd:complexType mixed="true">
           <xsd:complexContent>
             <xsd:extension base="InputWidgetType">
               <xsd:sequence maxOccurs="unbounded" minOccurs="0">
                 <xsd:element maxOccurs="1" minOccurs="1" name="headers">
                   <xsd:complexType mixed="true">
                     <xsd:attribute name="constants" type="xsd:boolean"/>
                   </xsd:complexType>
                 </xsd:element>
                 <xsd:element maxOccurs="1" minOccurs="1" name="widths" type="xsd:string"/>
                 <xsd:element maxOccurs="1" minOccurs="1" name="editors">
                   <xsd:complexType>
                     <xsd:sequence maxOccurs="unbounded" minOccurs="0">
                       <xsd:element maxOccurs="unbounded" minOccurs="0" name="textbox">
                         <xsd:complexType>
                           <xsd:attribute name="case">
                             <xsd:simpleType>
                               <xsd:restriction base="xsd:string">
                                 <xsd:enumeration value="upper"/>
                                 <xsd:enumeration value="lower"/>
                                 <xsd:enumeration value="mixed"/>
                               </xsd:restriction>
                             </xsd:simpleType>
                           </xsd:attribute>
                         </xsd:complexType>
                       </xsd:element>
                       <xsd:element maxOccurs="unbounded" minOccurs="0" name="option">
                         <xsd:complexType mixed="true">
                           <xsd:sequence>
                             <xsd:element maxOccurs="unbounded" minOccurs="0" name="item">
                               <xsd:complexType mixed="true">
                                 <xsd:attribute name="value" type="xsd:string" use="required"/>
                               </xsd:complexType>
                             </xsd:element>
                           </xsd:sequence>
                           <xsd:attribute name="fromModel" type="xsd:boolean"/>
                           <xsd:attribute name="fromHidden" type="xsd:string"/>
                         </xsd:complexType>
                       </xsd:element>
                       <xsd:element maxOccurs="unbounded" minOccurs="0" name="check"/>
                       <xsd:element maxOccurs="unbounded" minOccurs="0" name="label"/>
                       <xsd:element maxOccurs="unbounded" minOccurs="0" name="collection"/>
                       <xsd:element maxOccurs="unbounded" minOccurs="0" name="maskedbox">
                         <xsd:complexType>
                           <xsd:attribute name="mask" type="xsd:string" use="required"/>
                         </xsd:complexType>
                       </xsd:element>
                       <xsd:element maxOccurs="unbounded" minOccurs="0" name="image"/>
                       <xsd:element maxOccurs="unbounded" minOccurs="0" name="link"/>
                       <xsd:element maxOccurs="unbounded" minOccurs="0" name="calendar">
                         <xsd:complexType>
                           <xsd:attribute name="begin" type="xsd:integer" use="required"/>
                           <xsd:attribute name="end" type="xsd:integer" use="required"/>
                         </xsd:complexType>
                       </xsd:element>
                     </xsd:sequence>
                   </xsd:complexType>
                 </xsd:element>
                 <xsd:element maxOccurs="1" minOccurs="1" name="fields">
                   <xsd:complexType>
                     <xsd:sequence maxOccurs="unbounded" minOccurs="0">
                       <xsd:element maxOccurs="unbounded" minOccurs="0" name="string" type="StringType"/>
                       <xsd:element maxOccurs="unbounded" minOccurs="0" name="number" type="NumberType"/>
                       <xsd:element maxOccurs="unbounded" minOccurs="0" name="check" type="CheckType"/>
                       <xsd:element maxOccurs="unbounded" minOccurs="0" name="date" type="DateType"/>
                       <xsd:element maxOccurs="unbounded" minOccurs="0" name="option" type="OptionType"/>
                     </xsd:sequence>
                   </xsd:complexType>
                 </xsd:element>
                 <xsd:element maxOccurs="1" minOccurs="0" name="sorts" type="xsd:string"/>
                 <xsd:element maxOccurs="1" minOccurs="0" name="filters" type="xsd:string"/>
                 <xsd:element maxOccurs="1" minOccurs="0" name="colAligns" type="xsd:string"/>
                 <xsd:element maxOccurs="1" minOccurs="0" name="staticTitles" type="xsd:string"/>
                 <xsd:element maxOccurs="1" minOccurs="0" name="dynamicTitles" type="xsd:string"/>
                 <xsd:element maxOccurs="1" minOccurs="0" name="statFilters">
                   <xsd:complexType>
                     <xsd:sequence maxOccurs="unbounded" minOccurs="0">
                       <xsd:element maxOccurs="unbounded" minOccurs="0" name="column">
                         <xsd:complexType>
                           <xsd:sequence>
                             <xsd:element maxOccurs="unbounded" minOccurs="0" name="filter">
                               <xsd:complexType>
                                 <xsd:attribute name="value" type="xsd:string"/>
                                 <xsd:attribute name="display" type="xsd:string" use="required"/>
                                 <xsd:attribute name="splitOn" type="xsd:string"/>
                               </xsd:complexType>
                             </xsd:element>
                           </xsd:sequence>
                         </xsd:complexType>
                       </xsd:element>
                     </xsd:sequence>
                   </xsd:complexType>
                 </xsd:element>
               </xsd:sequence>
               <xsd:attribute name="title" type="xsd:string"/>
               <xsd:attribute name="rows" type="xsd:integer"/>
               <xsd:attribute name="manager" type="xsd:string"/>
               <xsd:attribute name="serviceUrl" type="xsd:string"/>
             </xsd:extension>
           </xsd:complexContent>
         </xsd:complexType>
       </xsd:element>
    
     </xsd:choice>
   </xsd:complexType>
   
   <xsd:complexType name="StringType" mixed="true">
     <xsd:annotation>
       <xsd:documentation>
         This type represents a field of String type that can be passed back and forth from the client to the server.
         max and min refer to length.
       </xsd:documentation>
     </xsd:annotation>
     <xsd:attribute name="max" type="xsd:integer"/>
     <xsd:attribute name="min" type="xsd:integer"/>     
   </xsd:complexType>
   
   <xsd:complexType name="StringRPCType" mixed="true">
     <xsd:complexContent>
       <xsd:extension base="StringType">
         <xsd:attribute name="key" type="xsd:string" use="required"/>
         <xsd:attribute name="required" type="xsd:boolean" use="required"/>
       </xsd:extension>
     </xsd:complexContent>
   </xsd:complexType>
   
   <xsd:complexType name="CheckType">
     <xsd:annotation>
       <xsd:documentation>
         This type represents a field of check type that can be passed back and forth from the client to the server.
       </xsd:documentation>
     </xsd:annotation>
   </xsd:complexType>   
 
   <xsd:complexType name="CheckRPCType">
     <xsd:complexContent>
       <xsd:extension base="CheckType">
         <xsd:attribute name="key" type="xsd:string" use="required"/>
         <xsd:attribute name="required" type="xsd:boolean" use="required"/>
       </xsd:extension>
     </xsd:complexContent>
   </xsd:complexType>
   
   <xsd:complexType name="TableType">
     <xsd:annotation>
       <xsd:documentation>
         This type represents a field of check type that can be passed back and forth from the client to the server.
       </xsd:documentation>
     </xsd:annotation>
   </xsd:complexType>   
 
   <xsd:complexType name="TableRPCType">
     <xsd:complexContent>
       <xsd:extension base="TableType">
         <xsd:attribute name="key" type="xsd:string" use="required"/>
       </xsd:extension>
     </xsd:complexContent>
   </xsd:complexType>   
   
   <xsd:complexType name="OptionType">
     <xsd:annotation>
       <xsd:documentation>
         This type represents a field of Option type that can be passed back and forth from the client to the server.
         Drop down values can be added to this widget by using the item element under an element of this type.
         cat refers to dictionary categories to load this widget if needed.  You can specify default values and cat values for 
         this widget.  if multi is true multiple options can be selected.  DragSelectWidget uses this field with multi set to 
         true for returning values to the server.
       </xsd:documentation>
     </xsd:annotation>   
     <xsd:sequence>
       <xsd:element maxOccurs="unbounded" minOccurs="0" name="item">
         <xsd:complexType mixed="true">
           <xsd:attribute name="value" type="xsd:string"/>
         </xsd:complexType>
       </xsd:element>
     </xsd:sequence>
     <xsd:attribute name="multi" type="xsd:boolean" use="required"/>
     <xsd:attribute name="cat" type="xsd:string"/>
   </xsd:complexType>  

   <xsd:complexType name="OptionRPCType">
     <xsd:complexContent>
       <xsd:extension base="OptionType">
         <xsd:attribute name="key" type="xsd:string" use="required"/>
         <xsd:attribute name="required" type="xsd:boolean" use="required"/>
       </xsd:extension>
     </xsd:complexContent>
   </xsd:complexType>   
   
   <xsd:complexType name="NumberType">
     <xsd:annotation>
       <xsd:documentation>
         This type represents a field of Number type that can be passed back and forth from the client to the server.
         type is required and options are integer or double.  max and min refer to numeric range.
       </xsd:documentation>
     </xsd:annotation>   
     <xsd:attribute name="type" use="required">
       <xsd:simpleType>
         <xsd:restriction base="xsd:string">
           <xsd:enumeration value="integer"/>
           <xsd:enumeration value="double"/>
         </xsd:restriction>
       </xsd:simpleType>
     </xsd:attribute>
     <xsd:attribute name="max" type="xsd:integer"/>
     <xsd:attribute name="min" type="xsd:integer"/>
   </xsd:complexType>  
   
   <xsd:complexType name="NumberRPCType">
     <xsd:complexContent>
       <xsd:extension base="NumberType">
         <xsd:attribute name="key" type="xsd:string" use="required"/>
         <xsd:attribute name="required" type="xsd:boolean" use="required"/>
       </xsd:extension>
     </xsd:complexContent>
   </xsd:complexType>    
   
   <xsd:complexType name="DateType">
     <xsd:annotation>
       <xsd:documentation>
         This type represents a field of Datetime type that can be passed back and forth from the client to the server.
         begin and end attributes refer to date precision as described in the Datetime class.  max and min are integer 
         values that refer are measured as days from current date.  If a date can not be in the future use max=0;
       </xsd:documentation>
     </xsd:annotation>   
     <xsd:attribute name="begin" type="xsd:integer" use="required"/>
     <xsd:attribute name="end" type="xsd:integer" use="required"/>
     <xsd:attribute name="max" type="xsd:integer"/>
     <xsd:attribute name="min" type="xsd:integer"/>
   </xsd:complexType>     
   
   <xsd:complexType name="DateRPCType">
     <xsd:complexContent mixed="true">
       <xsd:extension base="DateType">
         <xsd:attribute name="key" type="xsd:string" use="required"/>
         <xsd:attribute name="required" type="xsd:boolean" use="required"/>
       </xsd:extension>
     </xsd:complexContent>
   </xsd:complexType>    

   <xsd:complexType name="QueryCheckType">
    <xsd:attribute name="key" type="xsd:string" use="required"/>
   </xsd:complexType>
   
   <xsd:complexType name="QueryStringType">
     <xsd:attribute name="key" type="xsd:string" use="required"/>
   </xsd:complexType>
   
   <xsd:complexType name="QueryOptionType">
     <xsd:sequence>
       <xsd:element maxOccurs="unbounded" minOccurs="0" name="item">
         <xsd:complexType mixed="true">
           <xsd:attribute name="value" type="xsd:string"/>
         </xsd:complexType>
       </xsd:element>
     </xsd:sequence>
     <xsd:attribute name="key" type="xsd:string" use="required"/>
     <xsd:attribute name="type" type="xsd:string" use="required"/>
     <xsd:attribute name="multi" type="xsd:boolean" use="required"/>
   </xsd:complexType>
   
   <xsd:complexType name="QueryDateType">
     <xsd:attribute name="key" type="xsd:string" use="required"/>
     <xsd:attribute name="begin" type="xsd:integer" use="required"/>
     <xsd:attribute name="end" type="xsd:integer" use="required"/>
     <xsd:attribute name="max" type="xsd:integer"/>
     <xsd:attribute name="min" type="xsd:integer"/>   
   </xsd:complexType>
   
   <xsd:complexType name="QueryNumberType">
     <xsd:attribute name="key" type="xsd:string" use="required"/>
     <xsd:attribute name="type" use="required">
       <xsd:simpleType>
         <xsd:restriction base="xsd:string">
           <xsd:enumeration value="integer"/>
           <xsd:enumeration value="double"/>
         </xsd:restriction>
       </xsd:simpleType>
     </xsd:attribute>
     <xsd:attribute name="max" type="xsd:integer"/>
     <xsd:attribute name="min" type="xsd:integer"/> 
   </xsd:complexType>
   
</xsd:schema>
